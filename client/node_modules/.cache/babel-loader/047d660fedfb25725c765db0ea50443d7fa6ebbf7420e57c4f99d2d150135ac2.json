{"ast":null,"code":"import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\nvar escapeKeyCode = 27;\nvar noop = function noop() {};\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n/**\n * The `useRootClose` hook registers your callback on the document\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\n * style behavior where your callback is triggered when the user tries to\n * interact with the rest of the document or hits the `esc` key.\n *\n * @param {Ref<HTMLElement>|HTMLElement} ref  The element boundary\n * @param {function} onRootClose\n * @param {object}  options\n * @param {boolean} options.disabled\n * @param {string}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\n\nfunction useRootClose(ref, onRootClose, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    disabled = _ref.disabled,\n    _ref$clickTrigger = _ref.clickTrigger,\n    clickTrigger = _ref$clickTrigger === void 0 ? 'click' : _ref$clickTrigger;\n  var preventMouseRootCloseRef = useRef(false);\n  var onClose = onRootClose || noop;\n  var handleMouseCapture = useCallback(function (e) {\n    var currentTarget = ref && ('current' in ref ? ref.current : ref);\n    warning(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');\n    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || contains(currentTarget, e.target);\n  }, [ref]);\n  var handleMouse = useEventCallback(function (e) {\n    if (!preventMouseRootCloseRef.current) {\n      onClose(e);\n    }\n  });\n  var handleKeyUp = useEventCallback(function (e) {\n    if (e.keyCode === escapeKeyCode) {\n      onClose(e);\n    }\n  });\n  useEffect(function () {\n    if (disabled || ref == null) return undefined; // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    var removeMouseCaptureListener = listen(document, clickTrigger, handleMouseCapture, true);\n    var removeMouseListener = listen(document, clickTrigger, handleMouse);\n    var removeKeyupListener = listen(document, 'keyup', handleKeyUp);\n    var mobileSafariHackListeners = [];\n    if ('ontouchstart' in document.documentElement) {\n      mobileSafariHackListeners = [].slice.call(document.body.children).map(function (el) {\n        return listen(el, 'mousemove', noop);\n      });\n    }\n    return function () {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      removeKeyupListener();\n      mobileSafariHackListeners.forEach(function (remove) {\n        return remove();\n      });\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);\n}\nexport default useRootClose;","map":{"version":3,"names":["contains","listen","useCallback","useEffect","useRef","useEventCallback","warning","escapeKeyCode","noop","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","useRootClose","ref","onRootClose","_temp","_ref","disabled","_ref$clickTrigger","clickTrigger","preventMouseRootCloseRef","onClose","handleMouseCapture","e","currentTarget","current","target","handleMouse","handleKeyUp","keyCode","undefined","removeMouseCaptureListener","document","removeMouseListener","removeKeyupListener","mobileSafariHackListeners","documentElement","slice","call","body","children","map","el","forEach","remove"],"sources":["/Users/karenksin/project_r2019/node_modules/react-overlays/esm/useRootClose.js"],"sourcesContent":["import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\nvar escapeKeyCode = 27;\n\nvar noop = function noop() {};\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n/**\n * The `useRootClose` hook registers your callback on the document\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\n * style behavior where your callback is triggered when the user tries to\n * interact with the rest of the document or hits the `esc` key.\n *\n * @param {Ref<HTMLElement>|HTMLElement} ref  The element boundary\n * @param {function} onRootClose\n * @param {object}  options\n * @param {boolean} options.disabled\n * @param {string}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\n\n\nfunction useRootClose(ref, onRootClose, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      disabled = _ref.disabled,\n      _ref$clickTrigger = _ref.clickTrigger,\n      clickTrigger = _ref$clickTrigger === void 0 ? 'click' : _ref$clickTrigger;\n\n  var preventMouseRootCloseRef = useRef(false);\n  var onClose = onRootClose || noop;\n  var handleMouseCapture = useCallback(function (e) {\n    var currentTarget = ref && ('current' in ref ? ref.current : ref);\n    warning(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');\n    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || contains(currentTarget, e.target);\n  }, [ref]);\n  var handleMouse = useEventCallback(function (e) {\n    if (!preventMouseRootCloseRef.current) {\n      onClose(e);\n    }\n  });\n  var handleKeyUp = useEventCallback(function (e) {\n    if (e.keyCode === escapeKeyCode) {\n      onClose(e);\n    }\n  });\n  useEffect(function () {\n    if (disabled || ref == null) return undefined; // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    var removeMouseCaptureListener = listen(document, clickTrigger, handleMouseCapture, true);\n    var removeMouseListener = listen(document, clickTrigger, handleMouse);\n    var removeKeyupListener = listen(document, 'keyup', handleKeyUp);\n    var mobileSafariHackListeners = [];\n\n    if ('ontouchstart' in document.documentElement) {\n      mobileSafariHackListeners = [].slice.call(document.body.children).map(function (el) {\n        return listen(el, 'mousemove', noop);\n      });\n    }\n\n    return function () {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      removeKeyupListener();\n      mobileSafariHackListeners.forEach(function (remove) {\n        return remove();\n      });\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);\n}\n\nexport default useRootClose;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}